
 -- Rust basics: bindings versus variable declarations

 # In programming languages such as C/C++, C#/Java, and JavaScript/Perl/Pyton/Ruby,
   the 'variable declaration' is a familiar construct, although the syntax may differ
   (perhaps just slightly) among the languages. There's a Java example, with comments
   to clarify:

      int num = -1;   // declare a variable named 'num' and initialize its value to -1
      num = num + 1;  // increment the variable: its value is now 0
      num = num + 2;  // increment by 2 this time: value is now 2

   ## To prevent updates, these languages provide keywords such as 'final' or the like:

      final int num = 1;   // declare a 'final' int and initialize it to 1
      num = num + 1;       // ### error
      num = 1;             // ### still an error -- can't reset even to the initial value

 # Rust has 'variable bindings' rather than variable declarations. There are some syntactic
   similarities, but there are important, if subtle, underlying differences.

      let num = 27;   // bind the identifier 'num' with the i32 (32-bit signed integer) value 27
      num = num + 1;  // ### error: by default, a binding is immutable

      let mut k = -1; // a mutable binding
      k = k + 1;      // ok: the binding is mutable -- the name can be linked to a different i32 value
                      // to produce a new binding.

      let r: i32 = -999; // an immutable binding with the type (i32) given explicitly.

      let s: i32;        // type must be given, as it can't be inferred from a value -- in effect,
                         // a 'binding in preparation', as a value hasn't been given yet.

      

 
      
